{"version":3,"sources":["components/Auth/AuthForm.module.css","firebase/Firebase.js","components/Auth/AuthForm.js","pages/AuthPage.js"],"names":["module","exports","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","getAuth","provider","GoogleAuthProvider","AuthForm","enteredEmailRef","useRef","enteredPasswordRef","useState","isLogin","setIsLogin","isLoading","setIsLoading","navigate","useNavigate","dispatch","useDispatch","error","useSelector","state","focusHandler","authActions","setError","className","classes","onSubmit","event","preventDefault","url","email","current","value","password","fetch","method","body","JSON","stringify","returnSecureToken","headers","then","response","ok","json","data","errorMessage","message","Error","console","log","login","idToken","catch","control","htmlFor","onFocus","type","id","required","ref","actions","onClick","signInWithPopup","result","_tokenResponse","toggle","prevState","AuthPage"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,uBAAuB,QAAU,0BAA0B,QAAU,0BAA0B,OAAS,yBAAyB,MAAQ,wBAAwB,wBAAwB,0C,gFCiB5MC,EAAMC,YAXW,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,uDACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,8CAMIC,EAAOC,YAAQV,GAEtBW,EAAW,IAAIC,I,uCCmINC,EAjJE,WACf,IAAMC,EAAkBC,mBAClBC,EAAqBD,mBAC3B,EAA8BE,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAWC,cAGXC,EAAWC,cACXC,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMnB,KAAKiB,SA+ExCG,EAAe,WACnBL,EAASM,IAAYC,UAAS,KAGhC,OACE,0BAASC,UAAWC,IAAQxB,KAA5B,UACE,6BAAKS,EAAU,QAAU,YACzB,uBAAMgB,SA3DY,SAAAC,GACpBA,EAAMC,iBACN,IAGIC,EAHEC,EAAQxB,EAAgByB,QAAQC,MAChCC,EAAWzB,EAAmBuB,QAAQC,MAC5CnB,GAAa,GAIXgB,EADEnB,EAEA,oHAGA,wGAEJwB,MAAML,EAAK,CACTM,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBR,QACAG,WACAM,mBAAmB,IAErBC,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAAAC,GAEJ,OADA7B,GAAa,GACT6B,EAASC,GACJD,EAASE,OAETF,EAASE,OAAOH,MAAK,SAAAI,GAC1B,IAAIC,EAAe,yBAInB,MAHID,GAAQA,EAAK3B,MAAM6B,SAAWF,EAAK3B,QACrC4B,EAAeD,EAAK3B,MAAM6B,SAEtB,IAAIC,MAAMF,SAIrBL,MAAK,SAAAI,GACJI,QAAQC,IAAIL,GAIZ7B,EAASM,IAAY6B,MAAMN,EAAKO,UAChCtC,EAAS,aAEVuC,OAAM,SAAAnC,GACLF,EAASM,IAAYC,SAASL,EAAM6B,cAWtC,UACE,sBAAKvB,UAAWC,IAAQ6B,QAAxB,UACE,uBAAOC,QAAQ,QAAf,wBACA,uBACEC,QAASnC,EACToC,KAAK,QACLC,GAAG,QACHC,UAAQ,EACRC,IAAKtD,OAGT,sBAAKkB,UAAWC,IAAQ6B,QAAxB,UACE,uBAAOC,QAAQ,WAAf,2BACA,uBACEC,QAASnC,EACToC,KAAK,WACLC,GAAG,WACHC,UAAQ,EACRC,IAAKpD,OAGRU,GACC,qBAAKM,UAAWC,IAAQP,MAAxB,SACE,4BAAIA,MAGR,sBAAKM,UAAWC,IAAQoC,QAAxB,WACIjD,GACA,iCAASF,EAAU,QAAU,mBAE9BE,GAAa,2CACd,qBAAKY,UAAWC,IAAQoC,QAAxB,SACE,wBAAQrC,UAAWC,IAAQ,yBAA0BqC,QA/G/B,WDAzBC,YAAgB9D,EAAME,GCGxBsC,MAAK,SAAAuB,GACJf,QAAQC,IAAIc,EAAOC,eAAeb,SAElCH,QAAQC,IAAIc,GAMZhD,EAASM,IAAY6B,MAAMa,EAAOC,eAAeb,UACjDtC,EAAS,aAEVuC,OAAM,SAAAnC,GACL+B,QAAQC,IAAIhC,OA+FR,mCAIF,wBACEuC,KAAK,SACLjC,UAAWC,IAAQyC,OACnBJ,QA1HoB,WAC5BnD,GAAW,SAAAwD,GAAS,OAAKA,MAsHnB,SAKGzD,EAAU,qBAAuB,0CC3I/B0D,UAJE,WACb,OAAO,cAAC,EAAD","file":"static/js/5.a71ec83b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"AuthForm_auth__2UsH7\",\"control\":\"AuthForm_control__1t_GN\",\"actions\":\"AuthForm_actions__1KO9a\",\"toggle\":\"AuthForm_toggle__Xy4ue\",\"error\":\"AuthForm_error__3rUfu\",\"login-with-google-btn\":\"AuthForm_login-with-google-btn__mySLS\"};","// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: 'AIzaSyAL0N1DDE5PErh_25vFihwZzgbQ2cozKYY',\r\n  authDomain: 'react-http-597d3.firebaseapp.com',\r\n  databaseURL: 'https://react-http-597d3-default-rtdb.firebaseio.com',\r\n  projectId: 'react-http-597d3',\r\n  storageBucket: 'react-http-597d3.appspot.com',\r\n  messagingSenderId: '353984176080',\r\n  appId: '1:353984176080:web:6b50fb5fff9b938a1ea3d5',\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\nexport const auth = getAuth(app);\r\n\r\nconst provider = new GoogleAuthProvider();\r\n\r\nexport const signInWithGoogle = () => {\r\n  return signInWithPopup(auth, provider);\r\n};\r\n","import { useState, useRef} from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { signInWithGoogle } from '../../firebase/Firebase'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { authActions } from '../../store/auth-slice'; \r\n\r\nimport classes from './AuthForm.module.css';\r\n\r\nconst AuthForm = () => {\r\n  const enteredEmailRef = useRef();\r\n  const enteredPasswordRef = useRef();\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n\r\n  const dispatch = useDispatch();\r\n  const error = useSelector(state => state.auth.error);\r\n\r\n\r\n  const switchAuthModeHandler = () => {\r\n    setIsLogin(prevState => !prevState);\r\n  };\r\n\r\n  const signInWithGoogleHandler = () => {\r\n\r\n    signInWithGoogle()\r\n      .then(result => {\r\n        console.log(result._tokenResponse.idToken);\r\n\r\n        console.log(result);\r\n        // const expirationTime = new Date(\r\n        //   new Date().getTime() + +result._tokenResponse.expiresIn * 1000\r\n        // );\r\n        // const name = result.user.displayName;\r\n        // const profilePic = result.user.photoURL;\r\n        dispatch(authActions.login(result._tokenResponse.idToken));\r\n        navigate('/admin')\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const submitHandler = event => {\r\n    event.preventDefault();\r\n    const email = enteredEmailRef.current.value;\r\n    const password = enteredPasswordRef.current.value;\r\n    setIsLoading(true);\r\n    let url;\r\n\r\n    if (isLogin) {\r\n      url =\r\n        'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAL0N1DDE5PErh_25vFihwZzgbQ2cozKYY';\r\n    } else {\r\n      url =\r\n        'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAL0N1DDE5PErh_25vFihwZzgbQ2cozKYY';\r\n    }\r\n    fetch(url, {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        email,\r\n        password,\r\n        returnSecureToken: true,\r\n      }),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n      .then(response => {\r\n        setIsLoading(false);\r\n        if (response.ok) {\r\n          return response.json();\r\n        } else {\r\n          return response.json().then(data => {\r\n            let errorMessage = 'Authentication Failed!';\r\n            if (data && data.error.message && data.error) {\r\n              errorMessage = data.error.message;\r\n            }\r\n            throw new Error(errorMessage);\r\n          });\r\n        }\r\n      })\r\n      .then(data => {\r\n        console.log(data);\r\n        // const expirationTime = new Date(\r\n        //   new Date().getTime() + +data.expiresIn * 1000\r\n        // );\r\n        dispatch(authActions.login(data.idToken));\r\n        navigate('/admin');\r\n      })\r\n      .catch(error => {\r\n        dispatch(authActions.setError(error.message))\r\n      });\r\n  };\r\n\r\n  const focusHandler = () => {\r\n    dispatch(authActions.setError(false))\r\n  };\r\n\r\n  return (\r\n    <section className={classes.auth}>\r\n      <h1>{isLogin ? 'Login' : 'Sign Up'}</h1>\r\n      <form onSubmit={submitHandler}>\r\n        <div className={classes.control}>\r\n          <label htmlFor=\"email\">Your Email</label>\r\n          <input\r\n            onFocus={focusHandler}\r\n            type=\"email\"\r\n            id=\"email\"\r\n            required\r\n            ref={enteredEmailRef}\r\n          />\r\n        </div>\r\n        <div className={classes.control}>\r\n          <label htmlFor=\"password\">Your Password</label>\r\n          <input\r\n            onFocus={focusHandler}\r\n            type=\"password\"\r\n            id=\"password\"\r\n            required\r\n            ref={enteredPasswordRef}\r\n          />\r\n        </div>\r\n        {error && (\r\n          <div className={classes.error}>\r\n            <p>{error}</p>\r\n          </div>\r\n        )}\r\n        <div className={classes.actions}>\r\n          {!isLoading && (\r\n            <button>{isLogin ? 'Login' : 'Create Account'}</button>\r\n          )}\r\n          {isLoading && <p>Loading...</p>}\r\n          <div className={classes.actions}>\r\n            <button className={classes['login-with-google-btn']} onClick={signInWithGoogleHandler}>\r\n              Sign In With Google\r\n            </button>\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className={classes.toggle}\r\n            onClick={switchAuthModeHandler}\r\n          >\r\n            {isLogin ? 'Create new account' : 'Login with existing account'}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import AuthForm from \"../components/Auth/AuthForm\"\r\n\r\nconst AuthPage = () => {\r\n    return <AuthForm></AuthForm>\r\n}\r\n\r\nexport default AuthPage;"],"sourceRoot":""}